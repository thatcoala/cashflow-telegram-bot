import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from config import ExpenseStates
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter
from io import BytesIO
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"),
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ],
        [
            KeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è"),
            KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        ],
        [
            KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å"),
            KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç")
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
CATEGORIES = {
    "üçî –ï–¥–∞": "–ï–¥–∞",
    "üè† –ñ–∏–ª—å–µ": "–ñ–∏–ª—å–µ",
    "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üëï –û–¥–µ–∂–¥–∞": "–û–¥–µ–∂–¥–∞",
    "üíä –ó–¥–æ—Ä–æ–≤—å–µ": "–ó–¥–æ—Ä–æ–≤—å–µ",
    "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "üì± –°–≤—è–∑—å": "–°–≤—è–∑—å",
    "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "üéÅ –ü–æ–¥–∞—Ä–∫–∏": "–ü–æ–¥–∞—Ä–∫–∏",
    "üí° –î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
}

def get_categories_keyboard():
    keyboard = []
    row = []
    for i, (emoji, category) in enumerate(CATEGORIES.items()):
        row.append(InlineKeyboardButton(text=emoji, callback_data=f"category_{category}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_edit_fields_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –°—É–º–º–∞", callback_data="edit_amount"),
                InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_category")
            ],
            [
                InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")
            ]
        ]
    )

@dp.message(Command("start")) # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "–ò –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞—Ç—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü\n"
        "üìù –ò—Å—Ç–æ—Ä–∏—è - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: types.Message, state: FSMContext):
    cancel_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.99",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ExpenseStates.waiting_for_amount)

@dp.message(ExpenseStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await message.answer(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=get_categories_keyboard()
        )
        await state.set_state(ExpenseStates.waiting_for_category)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.99"
        )

@dp.message(ExpenseStates.waiting_for_category)
async def process_category_text(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        await state.clear()
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."
    )

@dp.callback_query(F.data.startswith("category_"))
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        category = callback.data.split("_")[1]
        await state.update_data(category=category)
        cancel_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±–µ–¥ –≤ –∫–∞—Ñ–µ –∏–ª–∏ –ü—Ä–æ–µ–∑–¥ –Ω–∞ –º–µ—Ç—Ä–æ",
            reply_markup=cancel_keyboard
        )
        await state.set_state(ExpenseStates.waiting_for_description)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

@dp.message(ExpenseStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    try:
        data = await state.get_data()
        if "amount" not in data or "category" not in data:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_keyboard
            )
            await state.clear()
            return

        async with aiosqlite.connect("expenses.db") as db:
            await db.execute(
                "INSERT INTO expenses (user_id, amount, category, description) VALUES (?, ?, ?, ?)",
                (message.from_user.id, data["amount"], data["category"], message.text)
            )
            await db.commit()
        
        await message.answer(
            "‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üí∞ –°—É–º–º–∞: {data['amount']:.2f} —Ä—É–±.\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    async with aiosqlite.connect("expenses.db") as db:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        # –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        total = await db.execute_fetchall(
            "SELECT SUM(amount) FROM expenses WHERE user_id = ? AND date >= ?",
            (message.from_user.id, thirty_days_ago)
        )
        total_amount = total[0][0] or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = await db.execute_fetchall(
            "SELECT category, SUM(amount) FROM expenses WHERE user_id = ? AND date >= ? GROUP BY category",
            (message.from_user.id, thirty_days_ago)
        )
        
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        response += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} —Ä—É–±.\n\n"
        response += "üìÅ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        
        for category, amount in categories:
            percentage = (amount / total_amount * 100) if total_amount > 0 else 0
            response += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±. ({percentage:.1f}%)\n"
        
        await message.answer(response)

@dp.message(F.text == "üìù –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: types.Message):
    async with aiosqlite.connect("expenses.db") as db:
        expenses = await db.execute_fetchall(
            "SELECT id, amount, category, description, date FROM expenses WHERE user_id = ? ORDER BY date DESC LIMIT 10",
            (message.from_user.id,)
        )
        
        if not expenses:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
            return
        
        response = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n"
        for expense_id, amount, category, description, date in expenses:
            response += f"üÜî ID: {expense_id}\n"
            response += f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
            response += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            response += f"üìÖ –î–∞—Ç–∞: {date}\n\n"
        
        await message.answer(response)

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def edit_expense(message: types.Message):
    async with aiosqlite.connect("expenses.db") as db:
        expenses = await db.execute_fetchall(
            "SELECT id, amount, category, description, date FROM expenses WHERE user_id = ? ORDER BY date DESC LIMIT 5",
            (message.from_user.id,)
        )
        
        if not expenses:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        keyboard = []
        for expense_id, amount, category, description, date in expenses:
            response += f"üÜî ID: {expense_id}\n"
            response += f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
            response += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            response += f"üìÖ –î–∞—Ç–∞: {date}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                text=f"ID: {expense_id} | {amount:.2f} —Ä—É–±. | {category}",
                callback_data=f"edit_select_{expense_id}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="edit_cancel"
        )])
        
        await message.answer(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@dp.callback_query(F.data.startswith("edit_select_"))
async def process_edit_selection(callback: types.CallbackQuery, state: FSMContext):
    expense_id = int(callback.data.split("_")[2])
    await state.update_data(edit_id=expense_id)
    
    await callback.message.answer(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_fields_keyboard()
    )
    await state.set_state(ExpenseStates.waiting_for_edit_field)
    await callback.answer()

@dp.callback_query(F.data == "edit_cancel")
async def process_edit_cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_field(callback: types.CallbackQuery, state: FSMContext):
    try:
        action = callback.data.split("_")[1]
        
        if action == "cancel":
            await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
            await state.clear()
            await callback.answer()
            return
        
        data = await state.get_data()
        if "edit_id" not in data:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_keyboard
            )
            await state.clear()
            await callback.answer()
            return
        
        await state.update_data(edit_field=action)
        
        if action == "category":
            await callback.message.answer(
                "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=get_categories_keyboard()
            )
        else:
            field_name = {
                "amount": "—Å—É–º–º—É",
                "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
            }.get(action, action)
            await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é {field_name}:")
        
        await state.set_state(ExpenseStates.waiting_for_edit_value)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

@dp.message(ExpenseStates.waiting_for_edit_value)
async def process_edit_value(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        if "edit_id" not in data or "edit_field" not in data:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_keyboard
            )
            await state.clear()
            return
        
        expense_id = data["edit_id"]
        field = data["edit_field"]
        
        if field == "amount":
            value = float(message.text)
            if value <= 0:
                raise ValueError
        else:
            value = message.text
        
        async with aiosqlite.connect("expenses.db") as db:
            await db.execute(
                f"UPDATE expenses SET {field} = ? WHERE id = ? AND user_id = ?",
                (value, expense_id, message.from_user.id)
            )
            await db.commit()
        
        field_name = {
            "amount": "–°—É–º–º–∞",
            "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ"
        }.get(field, field)
        
        await message.answer(
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üÜî ID: {expense_id}\n"
            f"üìù {field_name}: {value}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return
    finally:
        await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
async def delete_expense(message: types.Message):
    async with aiosqlite.connect("expenses.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤
        expenses = await db.execute_fetchall(
            "SELECT id, amount, category, description, date FROM expenses WHERE user_id = ? ORDER BY date DESC LIMIT 10",
            (message.from_user.id,)
        )
        
        if not expenses:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_keyboard
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–∞
        keyboard = []
        for expense in expenses:
            expense_id, amount, category, description, date = expense
            button_text = f"üí∞ {amount:.2f} —Ä—É–±. | {category} | {description[:20]}..."
            keyboard.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"delete_{expense_id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="delete_cancel"
        )])
        
        await message.answer(
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@dp.callback_query(F.data.startswith("delete_"))
async def process_delete_selection(callback: types.CallbackQuery):
    try:
        if callback.data == "delete_cancel":
            await callback.message.answer(
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_keyboard
            )
            await callback.answer()
            return
        
        expense_id = int(callback.data.split("_")[1])
        
        async with aiosqlite.connect("expenses.db") as db:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            cursor = await db.execute(
                "SELECT amount, category, description, date FROM expenses WHERE id = ? AND user_id = ?",
                (expense_id, callback.from_user.id)
            )
            expense = await cursor.fetchone()
            
            if not expense:
                await callback.message.answer(
                    "‚ùå –†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=main_keyboard
                )
                await callback.answer()
                return
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥
            await db.execute(
                "DELETE FROM expenses WHERE id = ? AND user_id = ?",
                (expense_id, callback.from_user.id)
            )
            await db.commit()
            
            amount, category, description, date = expense
            await callback.message.answer(
                "‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_keyboard
            )
    except ValueError:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–∞—Å—Ö–æ–¥–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
    finally:
        await callback.answer()

@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç")
async def export_data(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä Excel", callback_data="export_excel"),
                InlineKeyboardButton(text="üìÑ PDF", callback_data="export_pdf")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="export_cancel")
            ]
        ]
    )
    
    await message.answer(
        "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data.startswith("export_"))
async def process_export_format(callback: types.CallbackQuery):
    try:
        if callback.data == "export_cancel":
            await callback.message.answer(
                "‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_keyboard
            )
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        async with aiosqlite.connect("expenses.db") as db:
            cursor = await db.execute(
                """SELECT 
                    strftime('%d.%m.%Y %H:%M', date) as formatted_date,
                    amount,
                    COALESCE(category, '-') as category,
                    COALESCE(description, '-') as description
                FROM expenses 
                WHERE user_id = ? 
                ORDER BY date DESC""",
                (callback.from_user.id,)
            )
            expenses = await cursor.fetchall()

        if not expenses:
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_keyboard
            )
            await callback.answer()
            return

        if callback.data == "export_excel":
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "–†–∞—Å—Ö–æ–¥—ã"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ"]
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                cell.alignment = Alignment(horizontal="center")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for row, expense in enumerate(expenses, 2):
                date, amount, category, description = expense
                ws.cell(row=row, column=1, value=date).alignment = Alignment(horizontal="center")
                ws.cell(row=row, column=2, value=amount).number_format = '#,##0.00'
                ws.cell(row=row, column=3, value=category)
                ws.cell(row=row, column=4, value=description)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in range(1, 5):
                ws.column_dimensions[get_column_letter(col)].width = 20

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç—ã
            excel_file = BytesIO()
            wb.save(excel_file)
            excel_file.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                document=types.BufferedInputFile(
                    file=excel_file.getvalue(),
                    filename=f"expenses_{callback.from_user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                ),
                caption="üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel!"
            )

        elif callback.data == "export_pdf":
            # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª
            pdf_file = BytesIO()
            doc = SimpleDocTemplate(
                pdf_file,
                pagesize=letter,
                rightMargin=30,
                leftMargin=30,
                topMargin=30,
                bottomMargin=30
            )
            elements = []

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=20,
                spaceAfter=30,
                alignment=1
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            elements.append(Paragraph("–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö", title_style))

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            data = [["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ"]]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            total_amount = 0
            for expense in expenses:
                date, amount, category, description = expense
                formatted_amount = f"{float(amount):,.2f}"
                total_amount += float(amount)
                
                data.append([
                    date,
                    formatted_amount,
                    category,
                    description
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π
            data.append(["", "", "–ò–¢–û–ì–û:", f"{total_amount:,.2f}"])

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –∫–æ–ª–æ–Ω–æ–∫
            col_widths = [100, 80, 100, 250]
            table = Table(data, colWidths=col_widths)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã
            table_style = [
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#333333')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('TOPPADDING', (0, 0), (-1, 0), 12),
                
                # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                ('ALIGN', (0, 1), (0, -2), 'CENTER'),  # –î–∞—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                ('ALIGN', (1, 1), (1, -1), 'RIGHT'),   # –°—É–º–º–∞ —Å–ø—Ä–∞–≤–∞
                ('ALIGN', (2, 1), (2, -2), 'CENTER'),  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
                ('ALIGN', (3, 1), (3, -2), 'LEFT'),    # –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–≤–∞
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#f5f5f5')),
                ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
                ('ALIGN', (2, -1), (3, -1), 'RIGHT'),
                
                # –ì—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BOX', (0, 0), (-1, -1), 2, colors.black),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                
                # –®—Ä–∏—Ñ—Ç—ã –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                ('FONTSIZE', (0, 1), (-1, -2), 10),
                ('FONTNAME', (0, 1), (-1, -2), 'Helvetica'),
            ]
            
            table.setStyle(TableStyle(table_style))
            
            elements.append(table)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            date_style = ParagraphStyle(
                'DateStyle',
                parent=styles['Normal'],
                fontSize=8,
                textColor=colors.gray,
                alignment=2,  # –°–ø—Ä–∞–≤–∞
                spaceAfter=0,
                spaceBefore=20,
            )
            current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
            elements.append(Paragraph(f"–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {current_date}", date_style))

            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc.build(elements)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            pdf_file.seek(0)
            await callback.message.answer_document(
                document=types.BufferedInputFile(
                    file=pdf_file.getvalue(),
                    filename=f"expenses_{callback.from_user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                ),
                caption="üìÑ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ PDF!"
            )

    except Exception as e:
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await callback.answer()

async def main():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("expenses.db") as db:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
        await db.execute("""
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                category TEXT,
                description TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.commit()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 